"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestQueue = void 0;
const _ = __importStar(require("lodash"));
const errors_1 = require("./errors");
const DEFAULT_LIMIT = 60;
const DEFAULT_LIMIT_SECONDS = 60;
const DEFAULT_LIMIT_SECONDS_BUFFER = 1;
const DEFAULT_LIMIT_COUNT_BUFFER = 4;
const ONE_SECOND = 1000;
const DEFAULT_RATE_LIMIT_TIMEOUT = DEFAULT_LIMIT_SECONDS * ONE_SECOND;
const RETRY_AFTER_BUFFER_TIME = ONE_SECOND;
class RequestQueue {
    constructor(options) {
        this.options = _.assign({
            request: null,
            limit: DEFAULT_LIMIT,
            limitSeconds: DEFAULT_LIMIT_SECONDS,
            onRateLimitExceeded: _.noop,
            onRateLimitPause: _.noop,
            onRateLimitResume: _.noop,
        }, options);
        this.queue = [];
        this.limitCount = 0;
        this._resetTimeout();
    }
    enqueue(opts) {
        return new Promise((resolve, reject) => {
            this.queue.push({
                opts,
                resolve,
                reject,
            });
            this._processQueue();
        });
    }
    dequeue() {
        return this.queue.shift();
    }
    paused() {
        return !!this.timeoutId;
    }
    _processQueue(retryAfter) {
        if (this.queue.length > 0) {
            // if items left to process
            if (this.limitCount < Math.max(this.options.limit - DEFAULT_LIMIT_COUNT_BUFFER, 1)) {
                // if not over limit
                this.limitCount++;
                this._execute(this.dequeue());
                this._processQueue();
            }
            else if (!this.paused()) {
                // schedule
                this.options.onRateLimitPause();
                this._schedule(retryAfter);
            }
        }
    }
    _schedule(retryAfter) {
        if (!this.timeoutId) {
            const delay = Math.max(retryAfter || this.expires - Date.now(), 0);
            this.timeoutId = setTimeout(() => {
                this._resetTimeout();
                this.limitCount = 0;
                this.options.onRateLimitResume();
                this._processQueue();
            }, delay);
        }
    }
    _resetTimeout() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
        this.expires = Date.now() + (this.options.limitSeconds + DEFAULT_LIMIT_SECONDS_BUFFER) * ONE_SECOND;
    }
    _execute(reqInfo) {
        return this.options
            .request(reqInfo.opts)
            .then((res) => {
            return reqInfo.resolve(this._checkHeaders(res));
        })
            .catch((err) => {
            if (err instanceof errors_1.RateLimitExceededError) {
                this.options.onRateLimitExceeded(err);
                if (_.isNil(err.retryAfter)) {
                    // Abort retry due to missing retryAfter
                    return reqInfo.reject(err);
                }
                const retryAfter = err.retryAfter ? err.retryAfter * ONE_SECOND + RETRY_AFTER_BUFFER_TIME : DEFAULT_RATE_LIMIT_TIMEOUT;
                this.limitCount = Infinity;
                this.queue.push(reqInfo);
                this._processQueue(retryAfter);
            }
            else {
                return reqInfo.reject(err);
            }
        });
    }
    _checkHeaders(res) {
        if (res.headers[this.options.limitHeader]) {
            const limit = parseInt(res.headers[this.options.limitHeader], 10) || DEFAULT_LIMIT;
            if (limit !== this.options.limit) {
                this.options.limit = limit;
                this._resetTimeout();
                this._processQueue();
            }
        }
        return res;
    }
}
exports.RequestQueue = RequestQueue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1xdWV1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LXF1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMENBQTRCO0FBRTVCLHFDQUFrRDtBQUdsRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFDekIsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDakMsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLENBQUM7QUFDdkMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUM7QUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE1BQU0sMEJBQTBCLEdBQUcscUJBQXFCLEdBQUcsVUFBVSxDQUFDO0FBQ3RFLE1BQU0sdUJBQXVCLEdBQUcsVUFBVSxDQUFDO0FBa0IzQyxNQUFhLFlBQVk7SUFPeEIsWUFBWSxPQUE2QjtRQUN4QyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3RCO1lBQ0MsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsYUFBYTtZQUNwQixZQUFZLEVBQUUscUJBQXFCO1lBQ25DLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxJQUFJO1lBQzNCLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxJQUFJO1lBQ3hCLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxJQUFJO1NBQ3pCLEVBQ0QsT0FBTyxDQUNQLENBQUM7UUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUE2QjtRQUMzQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFD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LE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDM0I7Z0JBQ0QsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQUcsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDO2dCQUN2SCxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDL0I7aUJBQU07Z0JBQ04sT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzNCO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sYUFBYSxDQUFDLEdBQWM7UUFDbkMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDMUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxhQUFhLENBQUM7WUFDbkYsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDckI7U0FDRDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQztDQUNEO0FBakhELG9DQWlIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IElSZXF1ZXN0T3B0aW9uc0ludGVybmFsIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHsgUmF0ZUxpbWl0RXhjZWVkZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IElSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBERUZBVUxUX0xJTUlUID0gNjA7XG5jb25zdCBERUZBVUxUX0xJTUlUX1NFQ09ORFMgPSA2MDtcbmNvbnN0IERFRkFVTFRfTElNSVRfU0VDT05EU19CVUZGRVIgPSAxO1xuY29uc3QgREVGQVVMVF9MSU1JVF9DT1VOVF9CVUZGRVIgPSA0O1xuY29uc3QgT05FX1NFQ09ORCA9IDEwMDA7XG5jb25zdCBERUZBVUxUX1JBVEVfTElNSVRfVElNRU9VVCA9IERFRkFVTFRfTElNSVRfU0VDT05EUyAqIE9ORV9TRUNPTkQ7XG5jb25zdCBSRVRSWV9BRlRFUl9CVUZGRVJfVElNRSA9IE9ORV9TRUNPTkQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlcXVlc3RRdWV1ZU9wdGlvbnMge1xuXHRyZXF1ZXN0OiAob3B0czogSVJlcXVlc3RPcHRpb25zSW50ZXJuYWwpID0+IFByb21pc2U8SVJlc3BvbnNlPjtcblx0bGltaXQ6IG51bWJlcjtcblx0bGltaXRTZWNvbmRzOiBudW1iZXI7XG5cdGxpbWl0SGVhZGVyOiBzdHJpbmc7XG5cdG9uUmF0ZUxpbWl0RXhjZWVkZWQ6IChlcnI6IFJhdGVMaW1pdEV4Y2VlZGVkRXJyb3IpID0+IHZvaWQ7XG5cdG9uUmF0ZUxpbWl0UGF1c2U6ICgpID0+IHZvaWQ7XG5cdG9uUmF0ZUxpbWl0UmVzdW1lOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZXF1ZXN0UXVldWVJdGVtIHtcblx0b3B0czogSVJlcXVlc3RPcHRpb25zSW50ZXJuYWw7XG5cdHJlc29sdmU6ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcblx0cmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgUmVxdWVzdFF1ZXVlIHtcblx0cHJpdmF0ZSBvcHRpb25zOiBJUmVxdWVzdFF1ZXVlT3B0aW9ucztcblx0cHJpdmF0ZSBxdWV1ZTogSVJlcXVlc3RRdWV1ZUl0ZW1bXTtcblx0cHJpdmF0ZSBsaW1pdENvdW50OiBudW1iZXI7XG5cdHByaXZhdGUgZXhwaXJlczogbnVtYmVyO1xuXHRwcml2YXRlIHRpbWVvdXRJZDogTm9kZUpTLlRpbWVyO1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM6IElSZXF1ZXN0UXVldWVPcHRpb25zKSB7XG5cdFx0dGhpcy5vcHRpb25zID0gXy5hc3NpZ24oXG5cdFx0XHR7XG5cdFx0XHRcdHJlcXVlc3Q6IG51bGwsXG5cdFx0XHRcdGxpbWl0OiBERUZBVUxUX0xJTUlULFxuXHRcdFx0XHRsaW1pdFNlY29uZHM6IERFRkFVTFRfTElNSVRfU0VDT05EUyxcblx0XHRcdFx0b25SYXRlTGltaXRFeGNlZWRlZDogXy5ub29wLFxuXHRcdFx0XHRvblJhdGVMaW1pdFBhdXNlOiBfLm5vb3AsXG5cdFx0XHRcdG9uUmF0ZUxpbWl0UmVzdW1lOiBfLm5vb3AsXG5cdFx0XHR9LFxuXHRcdFx0b3B0aW9ucyxcblx0XHQpO1xuXHRcdHRoaXMucXVldWUgPSBbXTtcblx0XHR0aGlzLmxpbWl0Q291bnQgPSAwO1xuXHRcdHRoaXMuX3Jlc2V0VGltZW91dCgpO1xuXHR9XG5cblx0cHVibGljIGVucXVldWUob3B0czogSVJlcXVlc3RPcHRpb25zSW50ZXJuYWwpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5xdWV1ZS5wdXNoKHtcblx0XHRcdFx0b3B0cyxcblx0XHRcdFx0cmVzb2x2ZSxcblx0XHRcdFx0cmVqZWN0LFxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLl9wcm9jZXNzUXVldWUoKTtcblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBkZXF1ZXVlKCk6IElSZXF1ZXN0UXVldWVJdGVtIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuXHR9XG5cblx0cHVibGljIHBhdXNlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gISF0aGlzLnRpbWVvdXRJZDtcblx0fVxuXG5cdHByaXZhdGUgX3Byb2Nlc3NRdWV1ZShyZXRyeUFmdGVyPzogbnVtYmVyKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0Ly8gaWYgaXRlbXMgbGVmdCB0byBwcm9jZXNzXG5cdFx0XHRpZiAodGhpcy5saW1pdENvdW50IDwgTWF0aC5tYXgodGhpcy5vcHRpb25zLmxpbWl0IC0gREVGQVVMVF9MSU1JVF9DT1VOVF9CVUZGRVIsIDEpKSB7XG5cdFx0XHRcdC8vIGlmIG5vdCBvdmVyIGxpbWl0XG5cdFx0XHRcdHRoaXMubGltaXRDb3VudCsrO1xuXHRcdFx0XHR0aGlzLl9leGVjdXRlKHRoaXMuZGVxdWV1ZSgpKTtcblx0XHRcdFx0dGhpcy5fcHJvY2Vzc1F1ZXVlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCF0aGlzLnBhdXNlZCgpKSB7XG5cdFx0XHRcdC8vIHNjaGVkdWxlXG5cdFx0XHRcdHRoaXMub3B0aW9ucy5vblJhdGVMaW1pdFBhdXNlKCk7XG5cdFx0XHRcdHRoaXMuX3NjaGVkdWxlKHJldHJ5QWZ0ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgX3NjaGVkdWxlKHJldHJ5QWZ0ZXI/OiBudW1iZXIpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMudGltZW91dElkKSB7XG5cdFx0XHRjb25zdCBkZWxheSA9IE1hdGgubWF4KHJldHJ5QWZ0ZXIgfHwgdGhpcy5leHBpcmVzIC0gRGF0ZS5ub3coKSwgMCk7XG5cdFx0XHR0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9yZXNldFRpbWVvdXQoKTtcblx0XHRcdFx0dGhpcy5saW1pdENvdW50ID0gMDtcblx0XHRcdFx0dGhpcy5vcHRpb25zLm9uUmF0ZUxpbWl0UmVzdW1lKCk7XG5cdFx0XHRcdHRoaXMuX3Byb2Nlc3NRdWV1ZSgpO1xuXHRcdFx0fSwgZGVsYXkpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgX3Jlc2V0VGltZW91dCgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy50aW1lb3V0SWQpIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG5cdFx0XHR0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG5cdFx0fVxuXHRcdHRoaXMuZXhwaXJlcyA9IERhdGUubm93KCkgKyAodGhpcy5vcHRpb25zLmxpbWl0U2Vjb25kcyArIERFRkFVTFRfTElNSVRfU0VDT05EU19CVUZGRVIpICogT05FX1NFQ09ORDtcblx0fVxuXG5cdHByaXZhdGUgX2V4ZWN1dGUocmVxSW5mbzogSVJlcXVlc3RRdWV1ZUl0ZW0pOiBQcm9taXNlPElSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnNcblx0XHRcdC5yZXF1ZXN0KHJlcUluZm8ub3B0cylcblx0XHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0cmV0dXJuIHJlcUluZm8ucmVzb2x2ZSh0aGlzLl9jaGVja0hlYWRlcnMocmVzKSkgYXMgYW55O1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdGlmIChlcnIgaW5zdGFuY2VvZiBSYXRlTGltaXRFeGNlZWRlZEVycm9yKSB7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLm9uUmF0ZUxpbWl0RXhjZWVkZWQoZXJyKTtcblx0XHRcdFx0XHRpZiAoXy5pc05pbChlcnIucmV0cnlBZnRlcikpIHtcblx0XHRcdFx0XHRcdC8vIEFib3J0IHJldHJ5IGR1ZSB0byBtaXNzaW5nIHJldHJ5QWZ0ZXJcblx0XHRcdFx0XHRcdHJldHVybiByZXFJbmZvLnJlamVjdChlcnIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCByZXRyeUFmdGVyID0gZXJyLnJldHJ5QWZ0ZXIgPyBlcnIucmV0cnlBZnRlciAqIE9ORV9TRUNPTkQgKyBSRVRSWV9BRlRFUl9CVUZGRVJfVElNRSA6IERFRkFVTFRfUkFURV9MSU1JVF9USU1FT1VUO1xuXHRcdFx0XHRcdHRoaXMubGltaXRDb3VudCA9IEluZmluaXR5O1xuXHRcdFx0XHRcdHRoaXMucXVldWUucHVzaChyZXFJbmZvKTtcblx0XHRcdFx0XHR0aGlzLl9wcm9jZXNzUXVldWUocmV0cnlBZnRlcik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlcUluZm8ucmVqZWN0KGVycik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBfY2hlY2tIZWFkZXJzKHJlczogSVJlc3BvbnNlKTogSVJlc3BvbnNlIHtcblx0XHRpZiAocmVzLmhlYWRlcnNbdGhpcy5vcHRpb25zLmxpbWl0SGVhZGVyXSkge1xuXHRcdFx0Y29uc3QgbGltaXQgPSBwYXJzZUludChyZXMuaGVhZGVyc1t0aGlzLm9wdGlvbnMubGltaXRIZWFkZXJdLCAxMCkgfHwgREVGQVVMVF9MSU1JVDtcblx0XHRcdGlmIChsaW1pdCAhPT0gdGhpcy5vcHRpb25zLmxpbWl0KSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5saW1pdCA9IGxpbWl0O1xuXHRcdFx0XHR0aGlzLl9yZXNldFRpbWVvdXQoKTtcblx0XHRcdFx0dGhpcy5fcHJvY2Vzc1F1ZXVlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXM7XG5cdH1cbn1cbiJdfQ==